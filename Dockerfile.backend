FROM python:3.12

# Avoid interactive prompts
ENV DEBIAN_FRONTEND=noninteractive

# Set working directory
WORKDIR /app

# Install system dependencies, Poetry and configure it
RUN apt-get update && apt-get install -y \
    build-essential cmake git curl wget lsof vim unzip sqlite3 \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* \
    && pip install poetry \
    && poetry config virtualenvs.create false

# Copy dependency files and install dependencies
COPY pyproject.toml poetry.lock* README.md /app/
COPY dependencies/ /app/dependencies/
RUN poetry install --no-interaction --no-root \
    && GRAPHRAG_TARGET="1.2.1.dev27" \
    && GRAPHRAG_LOCAL_PATH="dependencies/graphrag-${GRAPHRAG_TARGET}.tar.gz" \
    && pip install --force-reinstall "$GRAPHRAG_LOCAL_PATH"

# Build llama.cpp
RUN LLAMA_LOCAL_ZIP="dependencies/llama.cpp.zip" \
    && echo "Using local llama.cpp archive..." \
    && unzip -q "$LLAMA_LOCAL_ZIP" \
    && cd llama.cpp \
    && mkdir -p build && cd build \
    && cmake .. \
    && cmake --build . --config Release \
    && if [ ! -f "bin/llama-server" ]; then \
         echo "Build failed: llama-server executable not found" && exit 1; \
       else \
         echo "Successfully built llama-server"; \
       fi

# Copy backend files and initialization scripts
COPY lpm_kernel/ /app/lpm_kernel/
COPY docker/ /app/docker/

# Create directories and initialize database
RUN mkdir -p /app/data/sqlite /app/data/chroma_db /app/logs /app/run /app/resources \
    && echo "Creating initial database structure..." \
    && sqlite3 /app/data/sqlite/lpm.db ".read /app/docker/sqlite/init.sql" \
    && echo "Database initialized" \
    && echo "Tables created in database:" \
    && sqlite3 /app/data/sqlite/lpm.db ".tables" \
    && echo "Initializing ChromaDB..." \
    && python /app/docker/app/init_chroma.py \
    && echo "ChromaDB initialized" \
    && python -c "import lpm_kernel; print('Module import check passed')"

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONPATH=/app \
    BASE_DIR=/app/data \
    LOCAL_LOG_DIR=/app/logs \
    RUN_DIR=/app/run \
    RESOURCES_DIR=/app/resources \
    APP_ROOT=/app \
    FLASK_APP=lpm_kernel.app

# Expose ports
EXPOSE 8002 8080

# Set the startup command
CMD bash -c 'echo "Starting application at $(date)" >> /app/logs/backend.log && cd /app && python -m flask run --host=0.0.0.0 --port=${LOCAL_APP_PORT:-8002} >> /app/logs/backend.log 2>&1'
